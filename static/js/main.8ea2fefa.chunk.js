(this.webpackJsonpmarchingcubedemo=this.webpackJsonpmarchingcubedemo||[]).push([[0],{41:function(e,t,i){},42:function(e,t,i){},52:function(e,t){},57:function(e,t,i){"use strict";i.r(t);var n=i(17),r=i.n(n),a=i(32),s=i.n(a),o=(i(41),i(9)),c=i(0),l=i(1),h=i(2),u=i(3),d=(i(42),i(10)),v=i(33),b=i(59),p=function(){function e(t,i,n){Object(c.a)(this,e),this.vector=t,this.value=Object(b.a)(n,{noise:i(t.x,t.y,t.z),vectorx:t.x,vectory:t.y,vectorz:t.z,length:t.length()})}return Object(l.a)(e,[{key:"setValue",value:function(e){this.value=e}},{key:"createCave",value:function(e){return this.setValue(this.vector.length()-50),this}},{key:"createSphere",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;return this.setValue(t-10*e(this.vector.x,this.vector.y,this.vector.z)-this.vector.length()+e(this.vector.x,this.vector.y,this.vector.z)),this}},{key:"createTerrain",value:function(e){return this.setValue(this.vector.y+e(this.vector.x,this.vector.y,this.vector.z)),this}}]),e}(),j=function(){function e(){Object(c.a)(this,e)}return Object(l.a)(e,null,[{key:"polygonise",value:function(t,i,n){var r=0,a=[];if(t[0].value>i&&(r|=1),t[1].value>i&&(r|=2),t[2].value>i&&(r|=4),t[3].value>i&&(r|=8),t[4].value>i&&(r|=16),t[5].value>i&&(r|=32),t[6].value>i&&(r|=64),t[7].value>i&&(r|=128),0!==e.edgeTable[r]){1&e.edgeTable[r]&&(a[0]=e.vertexInterp(t[0].vector,t[1].vector)),2&e.edgeTable[r]&&(a[1]=e.vertexInterp(t[1].vector,t[2].vector)),4&e.edgeTable[r]&&(a[2]=e.vertexInterp(t[2].vector,t[3].vector)),8&e.edgeTable[r]&&(a[3]=e.vertexInterp(t[3].vector,t[0].vector)),16&e.edgeTable[r]&&(a[4]=e.vertexInterp(t[4].vector,t[5].vector)),32&e.edgeTable[r]&&(a[5]=e.vertexInterp(t[5].vector,t[6].vector)),64&e.edgeTable[r]&&(a[6]=e.vertexInterp(t[6].vector,t[7].vector)),128&e.edgeTable[r]&&(a[7]=e.vertexInterp(t[7].vector,t[4].vector)),256&e.edgeTable[r]&&(a[8]=e.vertexInterp(t[0].vector,t[4].vector)),512&e.edgeTable[r]&&(a[9]=e.vertexInterp(t[1].vector,t[5].vector)),1024&e.edgeTable[r]&&(a[10]=e.vertexInterp(t[2].vector,t[6].vector)),2048&e.edgeTable[r]&&(a[11]=e.vertexInterp(t[3].vector,t[7].vector));for(var s=0;-1!==e.triTable[r][s];s+=3)n.push(a[e.triTable[r][s]].toArray()),n.push(a[e.triTable[r][s+1]].toArray()),n.push(a[e.triTable[r][s+2]].toArray())}}},{key:"vertexInterp",value:function(e,t){return e.clone().lerp(t,.5)}}]),e}();j.edgeTable=[0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0],j.triTable=[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1],[3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1],[3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1],[3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1],[9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1],[9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1],[2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1],[8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1],[9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1],[4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1],[3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1],[1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1],[4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1],[4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1],[9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1],[1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1],[5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1],[2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1],[9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1],[0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1],[2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1],[10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1],[4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1],[5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1],[5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1],[9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1],[0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1],[1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1],[10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1],[8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1],[2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1],[7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1],[9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1],[2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1],[11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1],[9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1],[5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1],[11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1],[11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1],[1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1],[9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1],[5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1],[2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1],[0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1],[5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,-1],[6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1],[0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1],[3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1],[6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1],[5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1],[1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1],[10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1],[6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1],[1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1],[8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1],[7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1],[3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1,-1],[5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1],[0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1],[9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1],[8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1],[5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1],[0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1],[6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1],[10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1],[10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1],[8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1],[1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1],[3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1],[0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1],[10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1],[0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1],[3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1],[6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1],[9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1],[8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1],[3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1],[6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1],[0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1],[10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1],[10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1],[1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1],[2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1],[7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1],[7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1],[2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1],[1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1],[11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1],[8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1],[0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1],[7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1],[10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1],[2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1],[6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1],[7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1],[2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1],[1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1],[10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1],[10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1],[0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1],[7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1],[6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1],[8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1],[9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1],[6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1],[4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1],[10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1],[8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1],[0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1],[1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1],[8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1],[10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1],[4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1],[10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1],[5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1],[11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1],[9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1],[6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1],[7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1],[3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1],[7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1],[9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1],[3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1],[6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1],[9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1],[1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1],[4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1],[7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1],[6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1],[3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1],[0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1],[6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1],[1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1],[0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1],[11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1],[6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1],[5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1],[9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1],[1,5,8,1,8,0,5,6,8,3,8,2,6,2,8,-1],[1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1],[10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1],[0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1],[5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1],[10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1],[11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1],[0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1],[9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1],[7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1],[2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1],[8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1],[9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1],[9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1],[1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1],[9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1],[9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1],[5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1],[0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1,-1],[10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1],[2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1],[0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1],[0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1],[9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1],[5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1],[3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1],[5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1],[8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1],[0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,-1],[9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1],[0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1],[1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1],[3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1],[4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1],[9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1],[11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1],[11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1],[2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1],[9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1],[3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1],[1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1],[4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1],[4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1],[0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1],[3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1],[3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1],[0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1],[9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1],[1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]];var m=i(35),f=function(){function e(t,i){Object(c.a)(this,e),this.scene=new d.k,this.renderer=new d.m,this.camera=new d.g(90,t/i,.1,1e5),this.controls=new v.OrbitControls(this.camera,this.renderer.domElement),this.renderer.setSize(t,i),this.startCoordinates={x:0,y:0,z:0},this.cleanUpList=[],this.objectName="example",this.gridName="grid",this.verticesName="verts",this.camera.position.z=50,this.spawnLight({x:1e3,y:1e3,z:1e3},8257791),this.animate()}return Object(l.a)(e,[{key:"resize",value:function(e,t){this.camera.aspect=e/t,this.camera.updateProjectionMatrix(),this.renderer.setSize(e,t)}},{key:"spawnLight",value:function(e,t){var i=new d.h(t,2);i.position.set(e.x,e.y,e.z),this.scene.add(i)}},{key:"createStructure",value:function(e){var t=new d.b;t.setAttribute("position",new d.a(e,3)),t.computeVertexNormals();var i=new d.f({side:d.c});i.color.setRGB(.5,1,.1);var n=new d.e(t,i);n.name=this.objectName,this.cleanUpList.push(this.objectName),this.scene.add(n)}},{key:"createCube",value:function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=arguments.length>3?arguments[3]:void 0,r=arguments.length>4?arguments[4]:void 0,a=i;return i||(a=[]),a.push(new p(new d.l(e.x,e.y+t,e.z+t),n,r)),a.push(new p(new d.l(e.x+t,e.y+t,e.z+t),n,r)),a.push(new p(new d.l(e.x+t,e.y+t,e.z),n,r)),a.push(new p(new d.l(e.x,e.y+t,e.z),n,r)),a}},{key:"createCubeGrid",value:function(e,t,i,n,r){for(var a=[],s=new d.l(e.x-t/2,e.y-t/2,e.z-t/2),o=s.x;o<s.x+t;o+=i)for(var c=s.z;c<s.z+t;c+=i)for(var l=s.y;l<s.y+t;l+=i)this.createCube(new d.l(o,l,c),i,a,n,r);return a}},{key:"cleanUp",value:function(){var e=this;this.cleanUpList.forEach((function(t){var i=e.scene.getObjectByName(t);i&&(i.material.dispose(),i.geometry.dispose(),i.parent.remove(i))}))}},{key:"generate",value:function(e,t,i,n,r,a){if(this.cleanUp(),!(i<0||n<0)){var s=[],o=Object(m.makeNoise3D)(Date.now()),c=this.createCubeGrid(this.startCoordinates,i,n,o,e);r&&this.drawPoints(c,this.gridName);for(var l=0;l<c.length-4;l+=4)j.polygonise(c.slice(l,l+8),t,s);for(var h=new Float32Array(3*s.length),u=0;u<s.length;u++)for(var d=0;d<3;d++)h[3*u+d]=s[u][d];a&&this.drawCoordinates(h,this.verticesName),this.createStructure(h)}}},{key:"animate",value:function(){this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.animate.bind(this))}},{key:"drawPoints",value:function(e,t){var i=new d.b,n=[];e.forEach((function(e){n.push(e.vector.x,e.vector.y,e.vector.z)})),i.setAttribute("position",new d.d(n,3));var r=new d.j({size:.2,sizeAttenuation:!0,alphaTest:.5,transparent:!0,color:16777215}),a=new d.i(i,r);a.name=t,this.cleanUpList.push(t),this.scene.add(a)}},{key:"drawCoordinates",value:function(e,t){var i=new d.b;i.setAttribute("position",new d.d(e,3));var n=new d.j({color:16711935,size:.5}),r=new d.i(i,n);r.name=t,this.cleanUpList.push(t),this.scene.add(r)}}]),e}(),x=i.p+"static/media/marchingcube.aff409f8.gif",y=i(7),g=function(e){Object(h.a)(i,e);var t=Object(u.a)(i);function i(){return Object(c.a)(this,i),t.apply(this,arguments)}return Object(l.a)(i,[{key:"render",value:function(){return Object(y.jsxs)("section",{id:"intro-section",children:[Object(y.jsx)("h1",{id:"title",children:"Marching Cubes: A Quick Note"}),Object(y.jsxs)("div",{id:"intro-paragraph",children:[Object(y.jsx)("p",{children:"Awhile back, I saw a YouTube video titled \u201cCoding Adventure: Marching Cubes\u201d by Sebastian Lague. It was an exploration of a graphical algorithm which generates a mesh (shape) based of 8-point fields (cubes). For those curious, the video goes in-depth about how the algorithm generates the mesh, but essentially:"}),Object(y.jsxs)("ol",{className:"style-list",children:[Object(y.jsx)("li",{children:"Take 8 equidistant points, forming a cube."}),Object(y.jsx)("li",{children:"Assign a numeric value to the points, based on a formula of your choosing."}),Object(y.jsx)("li",{children:"Compare the numeric values to a constant, called the \u201cisolevel\u201d."}),Object(y.jsx)("li",{children:"Create a new byte, set it to 0."}),Object(y.jsx)("li",{children:"Go through the points, and if the point\u2019s value is above the isolevel, set the appropriate bit in the byte to 1. For example, if point 1\u2019s value is 25, and the isolevel is 10, then the byte is now 0000 0001."}),Object(y.jsx)("li",{children:"As such, the byte creates a number between 0 and 255."}),Object(y.jsx)("li",{children:"By inputting this number into a premade array of possible combinations, you get a shape made of triangles!"}),Object(y.jsx)("li",{children:"You can use vertex interpolation to smooth out the shape."}),Object(y.jsx)("li",{children:"Finally, take these triangles and render them on the screen."})]}),Object(y.jsx)("p",{children:"If some of you are confused, that\u2019s perfectly normal. My brain shutdown the first time I read the algorithm. Take your time on each step, and don\u2019t be afraid to illustrate it on paper or whiteboard. Feel free to explore the demo on this page: it\u2019s made to illustrate what is possible with marching cubes and a bit of tinkering with the formula. As a final note, if you are interested in implementing the algorithm, these are the sources I used:"}),Object(y.jsxs)("ul",{children:[Object(y.jsx)("li",{children:Object(y.jsx)("a",{href:"http://paulbourke.net/geometry/polygonise/",children:" Paul Bourke's Marching Cube Implementation"})}),Object(y.jsx)("li",{children:Object(y.jsx)("a",{href:"https://www.youtube.com/watch?v=M3iI2l0ltbE",children:" Sebastian Lague's Video On Marching Cubes"})})]})]}),Object(y.jsx)("img",{id:"showcase-image",src:x,alt:"Marching Squares Showcase!"})]})}}]),i}(r.a.Component),O=function(e){Object(h.a)(i,e);var t=Object(u.a)(i);function i(){return Object(c.a)(this,i),t.apply(this,arguments)}return Object(l.a)(i,[{key:"render",value:function(){return Object(y.jsxs)("div",{className:"card",children:[Object(y.jsx)("h3",{children:this.props.name}),Object(y.jsx)("p",{children:this.props.description})]})}}]),i}(r.a.Component),w=function(e){Object(h.a)(i,e);var t=Object(u.a)(i);function i(e){var n;return Object(c.a)(this,i),(n=t.call(this,e)).handleClick=n.handleClick.bind(Object(o.a)(n)),n.defaults={formula:"vectorx + vectory + vectorz",isolevel:1,totalSize:200,individualSize:10,showGrid:!1,showVertices:!1},n}return Object(l.a)(i,[{key:"sanitize",value:function(e){for(var t in e)e&&0!==e[t].length||(e[t]=this.defaults[t]);e.formula=e.formula.toLowerCase(),e.isolevel=parseFloat(e.isolevel),e.totalSize=parseFloat(e.totalSize),e.individualSize=parseFloat(e.individualSize)}},{key:"handleClick",value:function(e){e.preventDefault();var t={formula:document.querySelector("#formula-input").value,isolevel:document.querySelector("#isolevel-input").value,totalSize:document.querySelector("#totalSize-input").value,individualSize:document.querySelector("#individualSize-input").value,showGrid:document.querySelector("#showGrid-input").checked,showVertices:document.querySelector("#showVertices-input").checked};this.sanitize(t),this.props.regenerate(t.formula,t.isolevel,t.totalSize,t.individualSize,t.showGrid,t.showVertices)}},{key:"render",value:function(){return Object(y.jsxs)("div",{className:"row-wrapper",id:"options-container",children:[Object(y.jsx)("h2",{children:"Options"}),Object(y.jsxs)("form",{className:"row-column",onSubmit:this.handleClick,children:[Object(y.jsxs)("div",{children:[Object(y.jsx)("label",{htmlFor:"showGrid",children:"Show Cube Grid"}),Object(y.jsx)("input",{type:"checkbox",className:"checkbox-input",id:"showGrid-input",name:"showGrid"})]}),Object(y.jsxs)("div",{children:[Object(y.jsx)("label",{htmlFor:"showGrid",children:"Show Generated Vertices"}),Object(y.jsx)("input",{type:"checkbox",className:"checkbox-input",id:"showVertices-input",name:"showVertices"})]}),Object(y.jsx)("input",{id:"individualSize-input",name:"individualSize",type:"number",min:"0",placeholder:"Cube Size: ".concat(this.defaults.individualSize)}),Object(y.jsx)("input",{id:"totalSize-input",name:"totalSize",type:"number",min:"0",placeholder:"Total Size: ".concat(this.defaults.totalSize)}),Object(y.jsx)("input",{id:"isolevel-input",name:"isolevel",type:"number",placeholder:"Isolevel: ".concat(this.defaults.isolevel)}),Object(y.jsx)("label",{htmlFor:"formula",children:"Formula"}),Object(y.jsx)("input",{id:"formula-input",name:"formula",type:"text",placeholder:"".concat(this.defaults.formula)}),Object(y.jsx)("button",{id:"generate-button",type:"submit",children:"Generate"}),Object(y.jsx)("p",{id:"error-paragraph"})]}),Object(y.jsx)("h2",{children:"Available Variables"}),Object(y.jsxs)("div",{className:"card-container",children:[Object(y.jsx)(O,{name:"Vector",description:"Represents a point's placement in the world. X is vectorx, Y is vectory and Z is vectorz."}),Object(y.jsx)(O,{name:"Length",description:'Represents the point\'s euclidian length. Try adding "length" into an expression!'}),Object(y.jsx)(O,{name:"Noise",description:'Represents a noise-generated value associated to the point. Typing "noise" will add randomness to the equation!'})]})]})}}]),i}(r.a.Component),z=function(e){Object(h.a)(i,e);var t=Object(u.a)(i);function i(){return Object(c.a)(this,i),t.apply(this,arguments)}return Object(l.a)(i,[{key:"componentDidMount",value:function(){this.mount.appendChild(this.props.canvas.renderer.domElement)}},{key:"render",value:function(){var e=this;return Object(y.jsx)("div",{id:"canvas-container",ref:function(t){return e.mount=t}})}}]),i}(r.a.Component),k=function(e){Object(h.a)(i,e);var t=Object(u.a)(i);function i(e){var n;return Object(c.a)(this,i),(n=t.call(this,e)).state={canvas:new f(window.innerWidth,window.innerHeight)},n.resizeCanvas=n.resizeCanvas.bind(Object(o.a)(n)),window.onresize=n.resizeCanvas,n}return Object(l.a)(i,[{key:"resizeCanvas",value:function(){this.state.canvas.resize(window.innerWidth,window.innerHeight)}},{key:"render",value:function(){return Object(y.jsxs)("section",{id:"demo-section",children:[Object(y.jsx)(w,{regenerate:this.state.canvas.generate.bind(this.state.canvas)}),Object(y.jsx)(z,{canvas:this.state.canvas})]})}}]),i}(r.a.Component),S=function(e){Object(h.a)(i,e);var t=Object(u.a)(i);function i(){return Object(c.a)(this,i),t.apply(this,arguments)}return Object(l.a)(i,[{key:"render",value:function(){return Object(y.jsxs)("main",{children:[Object(y.jsx)(g,{}),Object(y.jsx)(k,{})]})}}]),i}(r.a.Component),C=function(e){e&&e instanceof Function&&i.e(3).then(i.bind(null,60)).then((function(t){var i=t.getCLS,n=t.getFID,r=t.getFCP,a=t.getLCP,s=t.getTTFB;i(e),n(e),r(e),a(e),s(e)}))};s.a.render(Object(y.jsx)(S,{}),document.getElementById("root")),C()}},[[57,1,2]]]);
//# sourceMappingURL=main.8ea2fefa.chunk.js.map