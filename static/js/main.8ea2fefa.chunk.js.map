{"version":3,"sources":["scripts/MarchingCube.js","scripts/ThreeCanvas.js","images/marchingcube.gif","App.js","reportWebVitals.js","index.js"],"names":["Point","vector","noise","formula","this","value","evaluate","x","y","z","length","val","setValue","radius","MarchingCube","points","isolevel","triangles","cubeIndex","vertlist","edgeTable","vertexInterp","i","triTable","push","toArray","point1","point2","clone","lerp","ThreeCanvas","width","height","scene","THREE","renderer","camera","controls","OrbitControls","domElement","setSize","startCoordinates","cleanUpList","objectName","gridName","verticesName","position","spawnLight","animate","aspect","updateProjectionMatrix","coordinates","color","light","set","add","vertices","geometry","setAttribute","computeVertexNormals","material","side","setRGB","mesh","name","startCoords","size","cubeArray","midCoords","totalSize","sizePerCube","createCube","forEach","obj","getObjectByName","dispose","parent","remove","individualSize","showGrid","showVertices","cleanUp","makeNoise3D","Date","now","createCubeGrid","drawPoints","polygonise","slice","Float32Array","j","drawCoordinates","createStructure","render","requestAnimationFrame","bind","element","sizeAttenuation","alphaTest","transparent","particles","coordinatesArray","point","Introduction","id","className","href","src","gif","alt","React","Component","Card","props","description","Options","handleClick","defaults","rawInputs","key","toLowerCase","parseFloat","event","preventDefault","inputs","document","querySelector","checked","sanitize","regenerate","onSubmit","htmlFor","type","min","placeholder","TCanvas","mount","appendChild","canvas","ref","Demo","state","window","innerWidth","innerHeight","resizeCanvas","onresize","resize","generate","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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O,KAAO,KAAO,KACjD,IAAO,IAAO,IAAO,IAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,IAAO,IAAO,GAAO,IAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,IAAO,IAAO,IAAO,IAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,IAAO,IAAO,IAAO,IACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,IAAO,IAAO,KAAO,IACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,IAAO,IAAO,GAAO,IACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,IAAO,IAAO,IAAO,IACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,IAAO,IAAO,IAAO,IAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,IAAO,GAAO,IAAO,IAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,IAAO,KAAO,IAAO,IAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,IAAO,IAAO,IAAO,IAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,IAAO,IAAO,IAAO,IACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,IAAO,GAAO,IAAO,IACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KACjD,KAAO,KAAO,KAAO,KAAO,IAAO,IAAO,IAAO,IACjD,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO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AG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACvD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACnD,CAAC,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAAK,GAAI,GAAI,GAAI,GACrD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GACtD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACrD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACrD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACnD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GACnD,CAA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","file":"static/js/main.8ea2fefa.chunk.js","sourcesContent":["import {evaluate} from \"mathjs\";\r\n\r\nexport class Point{\r\n    constructor(vector, noise, formula){\r\n        this.vector = vector;\r\n        this.value = evaluate(formula, {\r\n            \"noise\": noise(vector.x, vector.y, vector.z),\r\n            \"vectorx\": vector.x,\r\n            \"vectory\": vector.y,\r\n            \"vectorz\": vector.z,\r\n            \"length\": vector.length()\r\n        });\r\n    }\r\n\r\n    setValue(val){\r\n        this.value = val;\r\n    }\r\n\r\n    createCave(noise){\r\n        this.setValue( this.vector.length() - 50);\r\n        return this;\r\n    }\r\n\r\n    createSphere(noise, radius=10){\r\n        this.setValue((radius - noise(this.vector.x, this.vector.y, this.vector.z) * 10) - this.vector.length() + noise(this.vector.x, this.vector.y, this.vector.z));\r\n        return this;\r\n    }\r\n\r\n    createTerrain(noise){\r\n        this.setValue(this.vector.y + noise(this.vector.x, this.vector.y, this.vector.z))\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * JS Implementation of Paul Bourke's Marching Cube algorithm\r\n * SRC: http://paulbourke.net/geometry/polygonise/ \r\n */\r\nexport default class MarchingCube{\r\n    static edgeTable = [\r\n        0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,\r\n        0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,\r\n        0x190, 0x99 , 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,\r\n        0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,\r\n        0x230, 0x339, 0x33 , 0x13a, 0x636, 0x73f, 0x435, 0x53c,\r\n        0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,\r\n        0x3a0, 0x2a9, 0x1a3, 0xaa , 0x7a6, 0x6af, 0x5a5, 0x4ac,\r\n        0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,\r\n        0x460, 0x569, 0x663, 0x76a, 0x66 , 0x16f, 0x265, 0x36c,\r\n        0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,\r\n        0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff , 0x3f5, 0x2fc,\r\n        0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,\r\n        0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55 , 0x15c,\r\n        0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,\r\n        0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc ,\r\n        0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,\r\n        0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,\r\n        0xcc , 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,\r\n        0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,\r\n        0x15c, 0x55 , 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,\r\n        0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,\r\n        0x2fc, 0x3f5, 0xff , 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,\r\n        0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,\r\n        0x36c, 0x265, 0x16f, 0x66 , 0x76a, 0x663, 0x569, 0x460,\r\n        0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,\r\n        0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0,\r\n        0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,\r\n        0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230,\r\n        0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,\r\n        0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190,\r\n        0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,\r\n        0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0\r\n    ];\r\n    static triTable = [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1],\r\n    [8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1],\r\n    [3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1],\r\n    [4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1],\r\n    [4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1],\r\n    [9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1],\r\n    [10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1],\r\n    [5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1],\r\n    [5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1],\r\n    [8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1],\r\n    [2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1],\r\n    [2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1],\r\n    [11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1],\r\n    [5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1],\r\n    [11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1],\r\n    [11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1],\r\n    [2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1],\r\n    [6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1],\r\n    [3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1],\r\n    [6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1],\r\n    [6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1],\r\n    [8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1],\r\n    [7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1],\r\n    [3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1],\r\n    [0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1],\r\n    [9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1],\r\n    [8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1],\r\n    [5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1],\r\n    [0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1],\r\n    [6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1],\r\n    [10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1],\r\n    [1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1],\r\n    [0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1],\r\n    [3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1],\r\n    [6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1],\r\n    [9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1],\r\n    [8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1],\r\n    [3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1],\r\n    [10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1],\r\n    [10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1],\r\n    [2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1],\r\n    [7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1],\r\n    [2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1],\r\n    [1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1],\r\n    [11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1],\r\n    [8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1],\r\n    [0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1],\r\n    [7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1],\r\n    [7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1],\r\n    [10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1],\r\n    [0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1],\r\n    [7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1],\r\n    [6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1],\r\n    [4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1],\r\n    [10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1],\r\n    [8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1],\r\n    [1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1],\r\n    [10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1],\r\n    [10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1],\r\n    [9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1],\r\n    [7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1],\r\n    [3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1],\r\n    [7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1],\r\n    [3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1],\r\n    [6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1],\r\n    [9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1],\r\n    [1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1],\r\n    [4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1],\r\n    [7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1],\r\n    [6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1],\r\n    [0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1],\r\n    [6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1],\r\n    [0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1],\r\n    [11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1],\r\n    [6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1],\r\n    [5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1],\r\n    [9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1],\r\n    [1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1],\r\n    [10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1],\r\n    [0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1],\r\n    [11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1],\r\n    [9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1],\r\n    [7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1],\r\n    [2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1],\r\n    [9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1],\r\n    [9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1],\r\n    [1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1],\r\n    [0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1],\r\n    [10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1],\r\n    [2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1],\r\n    [0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1],\r\n    [0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1],\r\n    [9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1],\r\n    [5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1],\r\n    [5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1],\r\n    [8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1],\r\n    [9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1],\r\n    [1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1],\r\n    [3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1],\r\n    [4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1],\r\n    [9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1],\r\n    [11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1],\r\n    [11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1],\r\n    [2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1],\r\n    [9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1],\r\n    [3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1],\r\n    [1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1],\r\n    [4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1],\r\n    [0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1],\r\n    [9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1],\r\n    [1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\r\n    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]];\r\n\r\n    static polygonise(points, isolevel, triangles){\r\n        let cubeIndex = 0;\r\n        let vertlist = [];\r\n\r\n        if (points[0].value > isolevel) cubeIndex |= 1;\r\n        if (points[1].value > isolevel) cubeIndex |= 2;\r\n        if (points[2].value > isolevel) cubeIndex |= 4;\r\n        if (points[3].value > isolevel) cubeIndex |= 8;\r\n        if (points[4].value > isolevel) cubeIndex |= 16;\r\n        if (points[5].value > isolevel) cubeIndex |= 32;\r\n        if (points[6].value > isolevel) cubeIndex |= 64;\r\n        if (points[7].value > isolevel) cubeIndex |= 128;\r\n        \r\n        if (MarchingCube.edgeTable[cubeIndex] === 0)\r\n            return;\r\n\r\n        // Find where the vertices should be located on the cube's sides.\r\n        if (MarchingCube.edgeTable[cubeIndex] & 1)\r\n            vertlist[0] = MarchingCube.vertexInterp(points[0].vector,points[1].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 2)\r\n            vertlist[1] = MarchingCube.vertexInterp(points[1].vector,points[2].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 4)\r\n            vertlist[2] = MarchingCube.vertexInterp(points[2].vector,points[3].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 8)\r\n            vertlist[3] = MarchingCube.vertexInterp(points[3].vector,points[0].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 16)\r\n            vertlist[4] = MarchingCube.vertexInterp(points[4].vector,points[5].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 32)\r\n            vertlist[5] = MarchingCube.vertexInterp(points[5].vector,points[6].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 64)\r\n            vertlist[6] = MarchingCube.vertexInterp(points[6].vector,points[7].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 128)\r\n            vertlist[7] = MarchingCube.vertexInterp(points[7].vector,points[4].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 256)\r\n            vertlist[8] = MarchingCube.vertexInterp(points[0].vector,points[4].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 512)\r\n            vertlist[9] = MarchingCube.vertexInterp(points[1].vector,points[5].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 1024)\r\n            vertlist[10] = MarchingCube.vertexInterp(points[2].vector,points[6].vector);\r\n        if (MarchingCube.edgeTable[cubeIndex] & 2048)\r\n            vertlist[11] = MarchingCube.vertexInterp(points[3].vector,points[7].vector);\r\n        \r\n        // Triangle Creation\r\n        for (let i = 0; MarchingCube.triTable[cubeIndex][i] !== -1; i += 3) {\r\n            triangles.push(vertlist[MarchingCube.triTable[cubeIndex][i]].toArray());\r\n            triangles.push(vertlist[MarchingCube.triTable[cubeIndex][i+1]].toArray());\r\n            triangles.push(vertlist[MarchingCube.triTable[cubeIndex][i+2]].toArray());\r\n        }\r\n    }\r\n\r\n    static vertexInterp(point1, point2){\r\n        return point1.clone().lerp(point2, 0.5);\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {OrbitControls} from '@three-ts/orbit-controls';\r\nimport MarchingCube, { Point } from './MarchingCube';\r\nimport { makeNoise3D } from 'open-simplex-noise';\r\n\r\nexport default class ThreeCanvas{\r\n    constructor(width, height){\r\n        this.scene = new THREE.Scene();\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.camera = new THREE.PerspectiveCamera(90, width / height, 0.1, 100000)\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.renderer.setSize( width, height);\r\n        this.startCoordinates = {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0\r\n        }\r\n        this.cleanUpList = [];\r\n        this.objectName = \"example\";\r\n        this.gridName = \"grid\"\r\n        this.verticesName = \"verts\";\r\n        this.camera.position.z = 50;\r\n        \r\n        this.spawnLight({x: 1000, y: 1000, z: 1000}, 0x7e00FF)\r\n\r\n\r\n        \r\n        this.animate();\r\n    }\r\n\r\n    resize(width, height){\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize(width, height);\r\n    }\r\n\r\n    spawnLight(coordinates, color){\r\n        const intensity = 2;\r\n        const light = new THREE.PointLight(color, intensity);\r\n        light.position.set(coordinates.x, coordinates.y, coordinates.z);\r\n        this.scene.add(light);\r\n    }\r\n\r\n    createStructure(vertices){\r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n        geometry.computeVertexNormals();\r\n        const material = new THREE.MeshStandardMaterial({side: THREE.DoubleSide});\r\n        material.color.setRGB(0.5, 1.0, 0.1);\r\n\r\n        const mesh = new THREE.Mesh( geometry, material );\r\n        \r\n        mesh.name = this.objectName;\r\n        this.cleanUpList.push(this.objectName);\r\n        this.scene.add(mesh);\r\n    }\r\n\r\n    createCube(startCoords, size, cubeArray = null, noise, formula){\r\n        let points = cubeArray;\r\n        if(!cubeArray)\r\n            points = [];\r\n\r\n        points.push(new Point(new THREE.Vector3(startCoords.x, startCoords.y + size, startCoords.z + size), noise, formula));\r\n        points.push(new Point(new THREE.Vector3(startCoords.x + size, startCoords.y + size, startCoords.z + size), noise, formula));\r\n        points.push(new Point(new THREE.Vector3(startCoords.x + size, startCoords.y + size, startCoords.z), noise, formula));\r\n        points.push(new Point(new THREE.Vector3(startCoords.x, startCoords.y + size, startCoords.z), noise, formula));\r\n\r\n        return points;\r\n    }\r\n\r\n    createCubeGrid(midCoords, totalSize, sizePerCube, noise, formula){\r\n        let points = [];\r\n        let startCoords = new THREE.Vector3(midCoords.x - totalSize/2, midCoords.y - totalSize/2, midCoords.z - totalSize/2);\r\n\r\n        for(let x = startCoords.x; x < startCoords.x + totalSize; x += sizePerCube){\r\n            for (let z = startCoords.z; z < startCoords.z + totalSize; z += sizePerCube) {\r\n                for(let y = startCoords.y; y < startCoords.y + totalSize; y += sizePerCube){\r\n                    this.createCube(new THREE.Vector3(x,y,z), sizePerCube, points, noise, formula);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return points;\r\n    }\r\n\r\n    cleanUp(){\r\n        this.cleanUpList.forEach(name =>{\r\n            let obj = this.scene.getObjectByName(name);\r\n            if(!obj)\r\n                return;\r\n\r\n            obj.material.dispose();\r\n            obj.geometry.dispose();\r\n            obj.parent.remove(obj);\r\n        })\r\n    }\r\n\r\n    generate(formula, isolevel, totalSize, individualSize, showGrid, showVertices){\r\n        this.cleanUp();\r\n        if(totalSize < 0 || individualSize < 0)\r\n            return;\r\n\r\n        let triangles = [];\r\n        let noise = makeNoise3D(Date.now());\r\n        \r\n        let points = this.createCubeGrid(this.startCoordinates, totalSize, individualSize, noise, formula);\r\n        \r\n        if(showGrid)\r\n            this.drawPoints(points, this.gridName);\r\n        for(let i = 0; i < points.length - 4; i+=4){\r\n            MarchingCube.polygonise(points.slice(i, i + 8), isolevel, triangles);\r\n        }\r\n        \r\n        let vertices = new Float32Array(triangles.length * 3);\r\n        for(let i = 0; i < triangles.length; i++){\r\n            for(let j = 0; j < 3; j++){\r\n                vertices[i * 3 + j] = triangles[i][j];\r\n            }\r\n        }\r\n\r\n        if(showVertices)\r\n            this.drawCoordinates(vertices, this.verticesName);\r\n        this.createStructure(vertices);\r\n    }\r\n    \r\n    animate(){\r\n        this.renderer.render(this.scene, this.camera);\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    drawPoints(points, name){\r\n        let geometry = new THREE.BufferGeometry()\r\n        const vertices = [];\r\n\r\n        points.forEach(element => {\r\n            vertices.push(element.vector.x, element.vector.y, element.vector.z);\r\n        });\r\n\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n        const material = new THREE.PointsMaterial( { size: 0.2, sizeAttenuation: true, alphaTest: 0.5, transparent: true, color: 0xffffff } );\r\n\r\n        const particles = new THREE.Points( geometry, material );\r\n        particles.name = name;\r\n        this.cleanUpList.push(name);\r\n\r\n\t    this.scene.add( particles );\r\n    }\r\n\r\n    drawCoordinates(coordinatesArray, name){\r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(coordinatesArray, 3));\r\n\r\n        const material = new THREE.PointsMaterial({color: 0xff00ff, size: 0.5});\r\n\r\n        const point = new THREE.Points(geometry, material);\r\n        point.name = name;\r\n        this.cleanUpList.push(name);\r\n\r\n        this.scene.add(point);\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/marchingcube.aff409f8.gif\";","import './App.css';\nimport React from 'react';\nimport ThreeCanvas from './scripts/ThreeCanvas';\nimport gif from './images/marchingcube.gif';\n\n\nclass Introduction extends React.Component{\n  render(){\n    return (\n      <section id=\"intro-section\">\n        <h1 id=\"title\">Marching Cubes: A Quick Note</h1>\n        <div id=\"intro-paragraph\">\n        <p>\n          Awhile back, I saw a YouTube video titled “Coding Adventure: Marching Cubes” by Sebastian Lague. It was an exploration of a graphical algorithm which generates a mesh (shape) based of 8-point fields (cubes). For those curious, the video goes in-depth about how the algorithm generates the mesh, but essentially:\n        </p>\n        <ol className=\"style-list\">\n            <li>Take 8 equidistant points, forming a cube.</li>\n            <li>Assign a numeric value to the points, based on a formula of your choosing.</li>\n            <li>Compare the numeric values to a constant, called the “isolevel”.</li>\n            <li>Create a new byte, set it to 0.</li>\n            <li>Go through the points, and if the point’s value is above the isolevel, set the appropriate bit in the byte to 1. For example, if point 1’s value is 25, and the isolevel is 10, then the byte is now 0000 0001.</li>\n            <li>As such, the byte creates a number between 0 and 255.</li>\n            <li>By inputting this number into a premade array of possible combinations, you get a shape made of triangles!</li>\n            <li>You can use vertex interpolation to smooth out the shape.</li>\n            <li>Finally, take these triangles and render them on the screen.</li>\n          </ol>\n          <p>\n          If some of you are confused, that’s perfectly normal. My brain shutdown the first time I read the algorithm. Take your time on each step, and don’t be afraid to illustrate it on paper or whiteboard. Feel free to explore the demo on this page: it’s made to illustrate what is possible with marching cubes and a bit of tinkering with the formula.\n          As a final note, if you are interested in implementing the algorithm, these are the sources I used:\n          </p>\n          <ul>\n            <li><a href=\"http://paulbourke.net/geometry/polygonise/\"> Paul Bourke's Marching Cube Implementation</a></li>\n            <li><a href=\"https://www.youtube.com/watch?v=M3iI2l0ltbE\"> Sebastian Lague's Video On Marching Cubes</a></li>\n          </ul>\n        </div>\n        <img id=\"showcase-image\" src={gif} alt=\"Marching Squares Showcase!\"></img>\n      </section>\n    )\n  }\n}\n\nclass Card extends React.Component{\n  render(){\n    return (\n      <div className=\"card\">\n        <h3>{this.props.name}</h3>\n        <p>{this.props.description}</p>\n      </div>\n    );\n  }\n}\n\nclass Options extends React.Component{\n  constructor(props){\n      super(props);\n      this.handleClick = this.handleClick.bind(this);\n      this.defaults = {\n        formula: \"vectorx + vectory + vectorz\",\n        isolevel: 1,\n        totalSize: 200,\n        individualSize: 10,\n        showGrid: false,\n        showVertices: false\n      }\n  }\n\n  sanitize(rawInputs){\n      for(const key in rawInputs)\n        if(!rawInputs || rawInputs[key].length === 0)\n          rawInputs[key] = this.defaults[key];\n      \n      rawInputs.formula = rawInputs.formula.toLowerCase();\n      rawInputs.isolevel = parseFloat(rawInputs.isolevel);\n      rawInputs.totalSize = parseFloat(rawInputs.totalSize);\n      rawInputs.individualSize = parseFloat(rawInputs.individualSize);\n  }\n\n  handleClick(event){\n    event.preventDefault();\n\n    let inputs = {\n      formula: document.querySelector('#formula-input').value,\n      isolevel: document.querySelector('#isolevel-input').value,\n      totalSize: document.querySelector('#totalSize-input').value,\n      individualSize: document.querySelector('#individualSize-input').value,\n      showGrid: document.querySelector('#showGrid-input').checked,\n      showVertices: document.querySelector('#showVertices-input').checked\n    }\n    this.sanitize(inputs);\n    this.props.regenerate(inputs.formula, inputs.isolevel, inputs.totalSize, inputs.individualSize, inputs.showGrid, inputs.showVertices);\n  }\n\n  render(){\n      return (\n          <div className=\"row-wrapper\" id=\"options-container\">\n            <h2>Options</h2>\n            <form className=\"row-column\" onSubmit={this.handleClick}>\n              <div>\n                <label htmlFor=\"showGrid\">Show Cube Grid</label>\n                <input type=\"checkbox\" className=\"checkbox-input\" id=\"showGrid-input\" name=\"showGrid\"></input>\n              </div>\n              <div>\n                <label htmlFor=\"showGrid\">Show Generated Vertices</label>\n                <input type=\"checkbox\" className=\"checkbox-input\" id=\"showVertices-input\" name=\"showVertices\"></input>\n              </div>\n              <input id=\"individualSize-input\" name=\"individualSize\" type=\"number\" min=\"0\" placeholder={`Cube Size: ${this.defaults.individualSize}`}></input>\n              <input id=\"totalSize-input\" name=\"totalSize\" type=\"number\" min=\"0\" placeholder={`Total Size: ${this.defaults.totalSize}`}></input>\n              <input id=\"isolevel-input\" name=\"isolevel\" type=\"number\" placeholder={`Isolevel: ${this.defaults.isolevel}`}></input>\n              <label htmlFor=\"formula\">Formula</label>\n              <input id=\"formula-input\" name=\"formula\" type=\"text\" placeholder={`${this.defaults.formula}`}></input>\n              <button id=\"generate-button\" type=\"submit\">Generate</button>\n              <p id=\"error-paragraph\"></p>\n            </form>\n            <h2>Available Variables</h2>\n            <div className=\"card-container\">\n              <Card name=\"Vector\" description=\"Represents a point's placement in the world. X is vectorx, Y is vectory and Z is vectorz.\"></Card>\n              <Card name=\"Length\" description={`Represents the point's euclidian length. Try adding \"length\" into an expression!`}></Card>\n              <Card name=\"Noise\" description={`Represents a noise-generated value associated to the point. Typing \"noise\" will add randomness to the equation!`}></Card>\n            </div>\n          </div>\n      );\n  }\n}\n\nclass TCanvas extends React.Component{\n  componentDidMount(){\n      this.mount.appendChild(this.props.canvas.renderer.domElement);\n  }\n\n  render(){\n      return (\n        <div id=\"canvas-container\" ref={ref => (this.mount = ref)}></div>\n      )\n  }\n}\n\nclass Demo extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {canvas: new ThreeCanvas(window.innerWidth, window.innerHeight)}\n    this.resizeCanvas = this.resizeCanvas.bind(this);\n    window.onresize = this.resizeCanvas;\n  }\n\n  resizeCanvas(){\n    this.state.canvas.resize(window.innerWidth, window.innerHeight)\n  }\n\n  render(){\n    return(\n      <section id=\"demo-section\">\n        <Options regenerate={this.state.canvas.generate.bind(this.state.canvas)}></Options>\n        <TCanvas canvas={this.state.canvas}></TCanvas>\n      </section>\n    )\n  }\n}\n\nclass App extends React.Component{\n  render(){\n    return(\n      <main>\n        <Introduction></Introduction>\n        <Demo></Demo>\n      </main>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}